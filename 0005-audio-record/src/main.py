# Generated by Anthropic Claude3.7 Sonnet

import os
import threading
import time
import wave

import pyaudio


class AudioRecorder:
    def __init__(
        self,
        filename="recording.wav",
        channels=1,
        rate=44100,
        chunk=1024,
        format=pyaudio.paInt16,
    ):
        """
        Initialize the audio recorder with configurable parameters

        Args:
            filename (str): Output filename for the recording
            channels (int): Number of audio channels (1=mono, 2=stereo)
            rate (int): Sample rate in Hz
            chunk (int): Number of frames per buffer
            format: Audio format (from pyaudio constants)
        """
        self.filename = filename
        self.channels = channels
        self.rate = rate
        self.chunk = chunk
        self.format = format
        self.p = pyaudio.PyAudio()
        self.frames = []
        self.is_recording = False
        self.recording_thread = None

    def start_recording(self):
        """Start audio recording in a separate thread"""
        if self.is_recording:
            print("Already recording!")
            return

        self.is_recording = True
        self.frames = []
        self.recording_thread = threading.Thread(target=self._record)
        self.recording_thread.start()
        print("Recording started...")

    def stop_recording(self):
        """Stop the recording and save to file"""
        if not self.is_recording:
            print("Not currently recording!")
            return

        self.is_recording = False
        if self.recording_thread:
            self.recording_thread.join()

        self._save_recording()
        print(f"Recording stopped and saved to {self.filename}")

    def _record(self):
        """Internal method that handles the recording process"""
        stream = self.p.open(
            format=self.format,
            channels=self.channels,
            rate=self.rate,
            input=True,
            frames_per_buffer=self.chunk,
        )

        while self.is_recording:
            data = stream.read(self.chunk)
            self.frames.append(data)

        stream.stop_stream()
        stream.close()

    def _save_recording(self):
        """Save the recorded frames to a WAV file"""
        if not self.frames:
            print("No audio data to save")
            return

        wf = wave.open(self.filename, "wb")
        wf.setnchannels(self.channels)
        wf.setsampwidth(self.p.get_sample_size(self.format))
        wf.setframerate(self.rate)
        wf.writeframes(b"".join(self.frames))
        wf.close()

    def __del__(self):
        """Clean up PyAudio when the object is destroyed"""
        self.p.terminate()


if __name__ == "__main__":
    pass
